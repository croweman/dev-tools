#!/usr/local/bin/node

'use strict';

/*
 SETUP
 -----

TODO: Test if meta doesn't exist??
 TODO: SHOULD I ALWAYS ENFORCE DEPLOY META AND PACKAGE LOCALLY
 TODO: REFACTOR
 TODO: Check the version in git, and in package etc
 TODO: What happens if exception occurs, do we log me
 TODO: MORE DISABLE PROPERTIES
 TODO: Test with differing package and meta versions
 TODO: local versions must be grewater than remote
 TODO: meta data version must increment, and package json, but both must  be the same
 TODO: package json shouldn't
 TODO: Package should be the same
 TODO: Compare versions 1.0.1.1 how?????????????? fail if less than or equal to?
 TODO: Must all be numeric parts

 global git hooks setup
 - git config --global init.templatedir '~/.git-templates'
 - mkdir -p ~/.git-templates/hooks
 - create ~/.git-templates/hooks/pre-push file and populate it with pre-push-node bash file
 - make file executable
     chmod a+x ~/.git-templates/hooks/pre-push
 - copy this file to ~/.git-templates/hooks/pre-push-node.js
 - reinitialise each relevant git hub repo that should use the pre-commit hook
     - git init
     - the git-init.sh bash script can be executed in a parent directory to reinitialise all child folders that have a .git folder,
       but it will not overwrite files that already exist.
 - ENVIRONMENT VARIABLES
    - If DISABLE_GIT_PREPUSH_RUN_TESTS is defined then tests will not be run
    - If DISABLE_GIT_PREPUSH_RUN_LINT is defined then lint will not be run
 */

const fs = require('fs'),
  exec = require('child_process').exec;

var version;
var pckage;
var currentWorkingDirectory = __dirname;
var remoteOriginUrl;
var remoteMetaDataVersion;
var remotePackageJsonVersion;
var metaDataVersion;
var packageJsonVersion;

if (currentWorkingDirectory.endsWith('/.git/hooks')) {
  currentWorkingDirectory = currentWorkingDirectory.substr(0, currentWorkingDirectory.indexOf('/.git/hooks'));
}

const metaDataRelativePath = '/deploy/metadata.json',
  packageJsonRelativePath = '/package.json',
  metaDataPath = currentWorkingDirectory + metaDataRelativePath,
  packageJsonPath = currentWorkingDirectory + packageJsonRelativePath;

logMessage('starting');

if (!fs.existsSync(packageJsonPath)) {
  logMessage('completed');
  return;
}

pckage = loadPackageJson();

if (!pckage) {
  logMessage('completed');
  return;
}

function collectionRemoteVersions() {
  var path = __dirname + '/zxyyxz/deploy/metadata.json';
  if (fs.existsSync(path)) {
    try {
      var metaData = require(path);
      remoteMetaDataVersion = metaData.version;

      if (remoteMetaDataVersion) {
        remoteMetaDataVersion = remoteMetaDataVersion.trim();
      }
    }
    catch (err) {
      logMessage('an error occurred while loading remote /deploy/metadata.json');
    }
  }

  path = __dirname + '/zxyyxz/package.json';

  if (fs.existsSync(path)) {
    try {
      var pack = require(path);
      remotePackageJsonVersion = pack.version;

      if (remotePackageJsonVersion) {
        remotePackageJsonVersion = remotePackageJsonVersion.trim();
      }
    }
    catch (err) {
      logMessage('an error occurred while loading remote package.json');
    }
  }

  if (remoteMetaDataVersion) {
    logMessage(remoteMetaDataVersion + ': remote deploy/metadata.json version')
  }

  if (remotePackageJsonVersion) {
    logMessage(remotePackageJsonVersion + ': remote package.json version')
  }
}

function getGitRemoteUrl() {
  return new Promise(function (resolve, reject) {

    logMessage('retrieving versions from remoteorigin');

    exec('git config --get remote.origin.url', function(error, stdout, stderr) {
      if (error) {
        logMessage('an error occurred while trying to determine the remote.origin.url: ' + error +(stderr || ''));
        return reject(error);
      }

      var url = stdout.trim();

      if (url === '') {
        logMessage('The git remote.origin.url could not be determined for the repository');
        return reject();
      }
      else {
        remoteOriginUrl = url;
        resolve();
      }
    });
  });
}

function cloneGitRepository() {
  return new Promise(function(resolve, reject) {

    if (fs.existsSync(__dirname + '/zxyyxz')) {

      exec('git pull', {CWD: __dirname + '/zxyyxz'},  function(error, stdout, stderr) {
        if (error) {
          logMessage('an error occurred while trying to pull a new vrsion of the git repository ' + remoteOriginUrl + ': ' + error + (stderr || ''));
          return reject(error);
        }
        collectionRemoteVersions();
        resolve();
      });
    }
    else {
      exec('git clone ' + remoteOriginUrl + ' zxyyxz', function(error, stdout, stderr) {
        if (error) {
          logMessage('an error occurred while trying to create a temporary clone of the git repository ' + remoteOriginUrl + ': ' + error + (stderr || ''));
          return reject(error);
        }

        collectionRemoteVersions();
        resolve();
      });
    }

  });
}

function checkVersions() {
  return new Promise(function(resolve, reject) {

    var versionRegex = /^(\d+\.)(\d+\.)(\d+)$/;

    // output versions and validate
    if (remoteMetaDataVersion) {

      if (fs.existsSync(metaDataPath)) {
        try {
          var metaData = require(metaDataPath);
          metaDataVersion = metaData.version;
          logMessage(metaDataVersion + ': deploy/metadata.json version');

          if (!versionRegex.test(metaDataVersion)) {
            logMessage('Error: deploy/metadata.json version is not valid');
            return reject();
          }
        }
        catch (err) {
          logMessage('an error occurred while loading deploy/metadata.json');
          return reject(err);
        }
      }

    }

    if (remotePackageJsonVersion) {

      if (fs.existsSync(packageJsonPath)) {
        try {
          var pack = require(packageJsonPath);
          packageJsonVersion = pack.version;
          logMessage(packageJsonVersion + ': package.json version');

          if (!versionRegex.test(packageJsonVersion)) {
            logMessage('Error: package.json version is not valid');
            return reject();
          }
        }
        catch (err) {
          logMessage('an error occurred while loading package.json');
          return reject(err);
        }
      }
    }

    if (!metaDataVersion) {
      logMessage('Error: deploy/metadata.json version is not valid');
      return reject();
    }

    if (!packageJsonVersion) {
      logMessage('Error: package.json version is not valid');
      return reject();
    }

    if (remoteMetaDataVersion && versionRegex.test(remoteMetaDataVersion)) {
      if (!isVersionGreater(metaDataVersion, remoteMetaDataVersion)) {
        logMessage('Error: deploy/metadata.json version is less than or equal to remote deploy/metadata.json version');
        return reject();
      }
    }

    if (remotePackageJsonVersion && versionRegex.test(remotePackageJsonVersion)) {
      if (!isVersionGreater(packageJsonVersion, remotePackageJsonVersion)) {
        logMessage('Error: package.json version is less than or equal to remote package.json version');
        return reject();
      }
    }

    if (metaDataVersion !== packageJsonVersion) {
      logMessage('ERROR: package.json and deploy/metadata.json versions should be the same');
      return reject();
    }

    return resolve();
  });
}

function isVersionGreater(localVersion, remoteVersion) {
  var local = localVersion || '';
  var remote = remoteVersion || '';

  var localParts = local.split('.');
  var remoteParts = remote.split('.');
  var maxParts = Math.max(localParts.length, remoteParts.length);

  while (localParts.length < maxParts) {
    localParts.push('0');
  }

  while (remoteParts.length < maxParts) {
    remoteParts.push('0');
  }

  localParts = localParts.map(function(part) { return parseInt(part); });
  remoteParts = remoteParts.map(function(part) { return parseInt(part); });

  for (var i = 0; i < maxParts; i++) {
    if (localParts[i] > remoteParts[i]) {
      return true;
    }

    if (localParts[i] < remoteParts[i]) {
      return false;
    }
  }

  return false;
}

getGitRemoteUrl()
  .then(cloneGitRepository)
  .then(checkVersions)
  .then(runTests)
  .then(runLint)
  .then(function() {
    logMessage('completed');
    process.exit(0);
  })
  .catch(function(err) {
    logMessage('Something went wrong: ' + err);
    process.exit(1);
  });

function runTests() {
  return new Promise(function(resolve, reject) {
    if (process.env.DISABLE_GIT_PREPUSH_RUN_TESTS === 'true') {
      return resolve();
    }

    if (pckage.scripts !== undefined && pckage.scripts.test) {

      logMessage('running tests');

      exec('npm run test', function(error, stdout, stderr) {
        if (error) {
          console.log(stderr);
          logMessage('an error occurred while running tests: ' + error);
          logMessage('running tests can be disabled by setting the environment variable "DISABLE_GIT_PREPUSH_RUN_TESTS=true"')
          logMessage('RUN "npm test" AND FIX THE ISSUES!');
          return reject();
        }

        console.log(stdout);
        resolve();
      });
    }
    else {
      resolve();
    }
  });
}

function runLint() {
  return new Promise(function(resolve, reject) {
    if (process.env.DISABLE_GIT_PREPUSH_RUN_LINT === 'true') {
      return resolve();
    }

    if (pckage.scripts !== undefined && pckage.scripts.lint) {
      logMessage('running lint');

      exec('npm run lint', function(error, stdout, stderr) {
        if (error) {
          console.log(stderr);
          logMessage('an error occurred while running lint: ' + error);
          logMessage('running tests can be disabled by setting the environment variable "DISABLE_GIT_PREPUSH_RUN_LINT=false"')
          logMessage('RUN "npm run lint" AND FIX THE ISSUES!');
          return reject();
        }

        console.log(stdout);
        resolve();
      });
    }
    else {
      resolve();
    }
  });
}

function loadPackageJson() {
  try {
    return require(packageJsonPath);
  }
  catch (err) {
    logMessage('package json could not be loaded' + err)
    return undefined;
  }

}

function logMessage(message) {
  console.log('** pre-push: ' + message + ' **');
}